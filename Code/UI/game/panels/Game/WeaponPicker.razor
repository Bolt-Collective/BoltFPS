@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Seekers

<root class="weapon-picker @( Show ? "active" : "" )" style="background-color: @BackgroundColour.Hex; backdrop-filter: blur(@BackgroundBlur);">
	<h5 class="banner" style="padding: 26px; background-color: #4E4E4E">CHOOSE YOUR DEADLY FORCE</h5>
	<div class="banner" style="padding: 16px;  border-bottom: 2px solid rgba(255, 255, 255, 0.25);
background: linear-gradient(0deg, #C97D37 0%, #a36d38 100%)">
		<div class="tabs" style="flex-grow: 1">
			<div class="button">
				Primary
			</div>
			<div class="button">
				Secondary
			</div>
			<div class="button">
				Equipment
			</div>
		</div>
		<div class="time-left">
			<img src="icons\menu\Hourglass.svg?w=36&h=36"/>

		</div>
	</div>
	<div class="loadout-container">

		<!-- Weapon Selection -->
		<div class="weapon-selection">
			@foreach ( var catagory in WeaponCategories )
			{
				<div class="category primary">
					<h3>@catagory.DisplayName</h3>
					<div class="weaponlist">
						@foreach ( var weapon in catagory.Weapons )
						{
							// TODO: Do team-specific weapon categories, maybe like a Team property.
							<button class="weapon-option @( IsSelected( weapon.DisplayName, catagory.SelectedWeapons ) )"
							        onclick=@( () => catagory.Select( weapon.DisplayName ) )>
								<img src="@weapon.Icon"/>
								<h5>@weapon.DisplayName</h5>
								<p>@weapon.Description</p>
							</button>
						}
					</div>
				</div>
			}
		</div>
	</div>
</root>

@code {

	[Property] public bool CanShow { get; set; } = true;

	[Property] public bool ShowOnKey { get; set; }

	[Property, ShowIf( "ShowOnKey", true ), InputAction]
	public string ShowAction { get; set; }

	[Property] public Color BackgroundColour { get; set; } = Color.Transparent;
	[Property] public float BackgroundBlur { get; set; } = 15f;

	public static WeaponPicker Current;

	protected override void OnAwake()
	{
		base.OnAwake();
		Current = this;
	}

	private bool Show => CanShow && (!ShowOnKey || (ShowOnKey && Input.Down( ShowAction )));

	private string IsSelected( object item, object selected )
	{
		if ( selected is List<string> selectedList )
			return selectedList.Contains( item?.ToString() ) ? "selected" : "";
		return item == selected ? "selected" : "";
	}

	[Property] public List<WeaponCategory> WeaponCategories { get; set; }

	public class WeaponCategory
	{
		[KeyProperty] public string DisplayName { get; set; }
		public List<ItemResource> Weapons { get; set; }
		public List<string> SelectedWeapons { get; set; } = new();
		public int MaxSelections { get; set; } = 1;

		public void Select( string weapon )
		{
			if ( SelectedWeapons.Contains( weapon ) )
			{
				SelectedWeapons.Remove( weapon );
			}
			else
			{
				if ( MaxSelections == 1 )
				{
					SelectedWeapons.Clear(); // remove previous selection
					SelectedWeapons.Add( weapon );
				}
				else if ( SelectedWeapons.Count < MaxSelections )
				{
					SelectedWeapons.Add( weapon );
				}
			}
		}
	}

	protected override int BuildHash()
	{
		return HashCode.Combine( Show );
	}

}
